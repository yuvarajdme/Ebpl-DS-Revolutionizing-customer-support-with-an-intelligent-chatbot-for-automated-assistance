# -*- coding: utf-8 -*-
"""Day 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TtLbgdX7siezeCBZpTcVguwlY0xXU98W
"""

import pandas as pd
data={
    'Student_ID': [101, 102, 103, 104, 105],
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Age': [20, 21, 22, 23, 20],
    'Grade': ['A', 'B', 'A', 'C', 'B'],
    'Marks': [85, 76, 92, 68, 88],
    'Attendance': [90, 85, 92, 78, 88]
}
df = pd.DataFrame(data)
print(df)
df["Age"].fillna(df["Age"].mean(), inplace=True)
df["Marks"].fillna(df["Marks"].median(), inplace=True)
df["Attendance"].fillna(df["Attendance"].mean(), inplace=True)
print(df)

print(df.isnull().sum()) # Changed df to student_df

df_cleaned = df.dropna() # Removes rows with missing values
print(df_cleaned)

df["Age"].fillna(df["Age"].mean(), inplace=True)
df["Marks"].fillna(df["Marks"].median(), inplace=True)
df["Attendance"].fillna(df["Attendance"].mean(),inplace=True)

import pandas as pd
data={
    'Student_ID': [101, 102, 103, 104, 105],
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Age': [20, 21, 22, 23, 20],
    'Grade': ['A', 'B', 'A', 'C', 'B'],
    'Marks': [85, 76, 92, 68, 88],
    'Attendance': [90, 85, 92, 78, 88]
}
df = pd.DataFrame(data)
df["Age"].fillna(df["Age"].mean(), inplace=True)
df["Marks"].fillna(df["Marks"].median(), inplace=True)
df["Attendance"].fillna(df["Attendance"].mean(), inplace=True)
print(df)
# Create 'Passed' column based on a condition (e.g., Marks >= 70)
df['Passed'] = df['Marks'] >= 70  # Example condition: Students with marks 70 or above passed
# Now you can fill missing values in 'Passed' if any
df["Passed"].fillna(df["Passed"].mode()[0], inplace=True) # Fill NaNs with the most frequent value (mode) in the 'Passed' column

df.drop_duplicates(inplace=True)

df.ffill(inplace=True) # Forward fill
df.bfill(inplace=True)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_scaled = df.copy()
df_scaled[["Marks", "Attendance"]] =scaler.fit_transform(df[["Marks", "Attendance"]])
print(df_scaled)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df_scaled[["Marks", "Attendance"]] =scaler.fit_transform(df[["Marks", "Attendance"]])
print(df_scaled)

df_encoded = pd.get_dummies(df, columns=["Passed"],
drop_first=True)
print(df_encoded)

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
df["Passed"] = encoder.fit_transform(df["Passed"])
print(df)

def performance_category(marks):
    if marks >= 85:
        return "High"
    elif marks >= 70:
        return "Medium"
    else:
        return "Low"
df["Performance"] = df["Marks"].apply(performance_category)
print(df)

df["Age_Group"] = pd.cut(df["Age"], bins=[18, 21, 24],
labels=["Young", "Adult"])
print(df)